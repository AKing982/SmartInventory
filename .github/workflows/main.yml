name: CI/CD Pipeline
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: SmartInventoryDB
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: pass
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/SmartInventoryDB
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: pass
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Build and test Java application
      run: |
        ls -la  # List files in the current directory
        if [ -f "./mvnw" ]; then
          chmod +x ./mvnw  # Make sure mvnw is executable
          ./mvnw clean install
        elif [ -f "mvnw" ]; then
          chmod +x mvnw
          ./mvnw clean install
        else
          mvn clean install
        fi
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    - name: Set Node.js environment
      run: export NODE_OPTIONS=--openssl-legacy-provider
    
    - name: Build and test React application
      run: |
        cd src/main/webapps
        npm ci --legacy-peer-deps
        npm install typescript@4.9.5 --save-dev --legacy-peer-deps
        npm install @testing-library/react@^13.0.0 @testing-library/jest-dom@^5.16.4 --save-dev --legacy-peer-deps
        npm update react-scripts --legacy-peer-deps
        npm run build
        npm test -- --passWithNoTests

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Debug AWS Configuration
      run: |
          aws sts get-caller-identity
          aws configure list   

    - name: Deploy to AWS Amplify
      env:
          AMPLIFY_APP_ID: ${{ secrets.AMPLIFY_APP_ID }}
          AMPLIFY_BRANCH: ${{ secrets.AMPLIFY_BRANCH }}
      run: |
          npm install -g @aws-amplify/cli
          amplify pull --appId $AMPLIFY_APP_ID --envName $AMPLIFY_BRANCH --yes
          amplify publish --yes