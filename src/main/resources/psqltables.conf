CREATE TABLE Contacts
(
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    phone VARCHAR(255) NOT NULL
);

CREATE TABLE Suppliers
(
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    user INT NOT NULL,
    FOREIGN KEY (contact_id) REFERENCES Contacts(id)
);

CREATE TABLE Products
(
    id SERIAL PRIMARY KEY,
    supplier_id INT,
    name VARCHAR(500) NOT NULL,
    sku VARCHAR(20) NOT NULL,
    description VARCHAR(255) NOT NULL,
    price DECIMAL NOT NULL,
    quantity DECIMAL NOT NULL,
    category VARCHAR(20) NOT NULL,
    productBrand VARCHAR(255),
    costPrice DECIMAL(10, 3),
    reorderPoint INT,
    modelNumber VARCHAR(255),
    expirationDate DATE,
    notes VARCHAR(255),
    supplier VARCHAR(255),
    markupPercent INT,
    dateAdded TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)
);

CREATE TABLE Stocks
(
    id SERIAL PRIMARY KEY,
    isLow BOOLEAN DEFAULT FALSE,
    quantity INT NOT NULL,
    product_id INT NOT NULL,
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    FOREIGN KEY (productid) REFERENCES Products(id)
);

CREATE TABLE Warehouse
(
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    address VARCHAR(255) NOT NULL,
    phone_number VARCHAR(20),
    email_address VARCHAR(100),
    total_capacity DECIMAL(10, 2) NOT NULL,
    used_capacity DECIMAL(10, 2) DEFAULT 0,
    warehouse_type VARCHAR(20) NOT NULL,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    manager_name VARCHAR(50),
    special_features TEXT,
    opening_time TIME,
    closing_time TIME,
    time_zone VARCHAR(20),
    establishment_date DATE,
    CONSTRAINT chk_warehouse_type CHECK (warehouse_type IN ('DISTRIBUTION', 'STORAGE', 'FULFILLMENT', 'COLD_STORAGE', 'BONDED', 'CROSS_DOCK')),
    CONSTRAINT chk_capacity CHECK (used_capacity <= total_capacity)
);

-- Create index on warehouse_type for faster queries
CREATE INDEX idx_warehouse_type ON Warehouse(warehouse_type);

-- Create index on is_active for faster queries
CREATE INDEX idx_warehouse_is_active ON Warehouse(is_active);

CREATE TABLE WarehouseSupplier
(
    warehouse_id INT NOT NULL,
    supplier_id INT NOT NULL,
    PRIMARY KEY (warehouse_id, supplier_id),
    FOREIGN KEY (warehouse_id) REFERENCES Warehouse(id),
    FOREIGN KEY (supplier_id) REFERENCES Suppliers(id)
);

-- Create WarehouseEmployee table
CREATE TABLE WarehouseEmployee
(
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    warehouse_id UUID NOT NULL,
    employee_name VARCHAR(100) NOT NULL,
    position VARCHAR(50) NOT NULL,
    hire_date DATE NOT NULL,
    FOREIGN KEY (warehouse_id) REFERENCES Warehouse(id)
);

CREATE TABLE Inventory
(
    inventory_id SERIAL PRIMARY KEY,
    product_id INT NOT NULL,
    warehouse_id INT NOT NULL,
    quantity DECIMAL NOT NULL,
    last_updated TIMESTAMP NOT NULL,

    FOREIGN KEY (warehouse_id) REFERENCES Warehouse(id),
    FOREIGN KEY (product_id) REFERENCES Products(id),
    UNIQUE(product_id, warehouse_id)
);

CREATE TABLE Users
(
    id SERIAL PRIMARY KEY,
    firstName VARCHAR(255) NOT NULL,
    lastName VARCHAR(255) NOT NULL,
    username VARCHAR(20) NOT NULL,
    email VARCHAR(100) NOT NULL,
    hashCombine VARCHAR(255) NOT NULL,
    isActive BOOLEAN NOT NULL,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE UserLog
(
    sessionID SERIAL PRIMARY KEY,
    userId INT NOT NULL,
    LoginTime TIMESTAMP NOT NULL,
    LogoutTime TIMESTAMP NOT NULL,
    IsActive BOOLEAN NOT NULL,

    FOREIGN KEY (userId) REFERENCES Users(userId)
);

CREATE TABLE InventoryNotes
(
    noteId SERIAL PRIMARY KEY,
    userId INT NOT NULL,
    orderId INT,
    title VARCHAR(50) NOT NULL,
    content VARCHAR(900) NOT NULL,
    author VARCHAR(50) NOT NULL,
    createdAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    noteType VARCHAR(25) NOT NULL,

    FOREIGN KEY (userId) REFERENCES Users(userId),
    FOREIGN KEY (orderId) REFERENCES Orders(id)
);

CREATE INDEX idx_inventorynotes_user_id ON InventoryNotes(userId);
CREATE INDEX idx_inventorynotes_order_id ON InventoryNotes(orderId);
CREATE INDEX idx_inventorynotes_note_type ON InventoryNotes(noteType);

CREATE TABLE Customers
(
    customerId SERIAL PRIMARY KEY,
    customerName VARCHAR(255) NOT NULL,
    customerAddress VARCHAR(500) NOT NULL,
    dateAdded TIMESTAMP NOT NULL
);

CREATE TABLE Orders (
                        Id SERIAL PRIMARY KEY,
                        OrderNumber VARCHAR(50) NOT NULL UNIQUE,
                        OrderDate TIMESTAMP NOT NULL,
                        Status INT NOT NULL,
                        Type INT NOT NULL,
                        CustomerId INT,
                        SupplierId INT,
                        TotalAmount DECIMAL(18,2) NOT NULL,
                        TaxAmount DECIMAL(18,2) NOT NULL,
                        ShippingCost DECIMAL(18,2) NOT NULL,
                        DiscountAmount DECIMAL(18,2) NOT NULL,
                        ShippingAddress TEXT,
                        BillingAddress TEXT,
                        PaymentMethod INT NOT NULL,
                        PaymentReference VARCHAR(100),
                        ShippedDate TIMESTAMP,
                        DeliveredDate TIMESTAMP,
                        notesId INT NOT NULL,
                        CreatedByUserId INT NOT NULL,
                        CreatedAt TIMESTAMP NOT NULL,
                        UpdatedAt TIMESTAMP,
                        FOREIGN KEY (CustomerId) REFERENCES Customers(customerId),
                        FOREIGN KEY (SupplierId) REFERENCES Suppliers(Id),
                        FOREIGN KEY (CreatedByUserId) REFERENCES Users(userId)
);

ALTER TABLE Orders
    ADD CONSTRAINT fk_inventory_notes
        FOREIGN KEY (notesId) REFERENCES InventoryNotes(noteId)
            ON DELETE CASCADE
            ON UPDATE NO ACTION;

CREATE TABLE OrderItems (
                            Id SERIAL PRIMARY KEY,
                            OrderId INT NOT NULL,
                            ProductId INT NOT NULL,
                            Quantity INT NOT NULL,
                            UnitPrice DECIMAL(18,2) NOT NULL,
                            Discount DECIMAL(18,2) NOT NULL,
                            TotalPrice DECIMAL(18,2) NOT NULL,
                            FOREIGN KEY (OrderId) REFERENCES Orders(Id),
                            FOREIGN KEY (ProductId) REFERENCES Products(Id)
);

CREATE INDEX idx_orders_ordernumber ON Orders(OrderNumber);
CREATE INDEX idx_orders_orderdate ON Orders(OrderDate);
CREATE INDEX idx_orders_status ON Orders(Status);
CREATE INDEX idx_orders_customerid ON Orders(CustomerId);
CREATE INDEX idx_orders_supplierid ON Orders(SupplierId);


-- Create a trigger to update the updatedAt timestamp for EmployeeRoles
CREATE OR REPLACE FUNCTION update_employee_roles_timestamp()
RETURNS TRIGGER AS $$
BEGIN
   NEW.updatedAt = CURRENT_TIMESTAMP;
   RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_employee_roles_timestamp
BEFORE UPDATE ON EmployeeRoles
FOR EACH ROW
EXECUTE FUNCTION update_employee_roles_timestamp();

CREATE TABLE Employees
(
    id SERIAL PRIMARY KEY,
    userId INT UNIQUE NOT NULL,
    hireDate DATE NOT NULL,
    jobTitle VARCHAR(100) NOT NULL,
    departmentId INT,
    managerId INT,
    warehouseId INT,
    empRole INT,
    salary DECIMAL(10, 2) NOT NULL,
    createdAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (userId) REFERENCES Users(userId),
    FOREIGN KEY (departmentId) REFERENCES Departments(departmentId),
    FOREIGN KEY (managerId) REFERENCES Employee(employeeId),
    FOREIGN KEY (warehouseId) REFERENCES Warehouse(warehouseId),
);

-- Create indexes for better query performance
CREATE INDEX idx_employee_email ON Employee(email);
CREATE INDEX idx_employee_department ON Employee(departmentId);
CREATE INDEX idx_employee_manager ON Employee(managerId);
CREATE INDEX idx_employee_warehouse ON Employee(warehouseId);
CREATE INDEX idx_employee_role ON EmployeeRoles(roleId);

-- Create a trigger to update the updatedAt timestamp
CREATE OR REPLACE FUNCTION update_employee_timestamp()
RETURNS TRIGGER AS $$
BEGIN
   NEW.updatedAt = CURRENT_TIMESTAMP;
   RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_employee_timestamp
BEFORE UPDATE ON Employee
FOR EACH ROW
EXECUTE FUNCTION update_employee_timestamp();



CREATE TABLE Managers
(
    managerId SERIAL PRIMARY KEY,
    employeeId INT NOT NULL, UNIQUE,
    departmentId INT NOT NULL,
    startDate DATE NOT NULL,
    endDate DATE NOT NULL,
    isActive BOOLEAN NOT NULL DEFAULT TRUE,
    createdAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (employeeId) REFERENCES Employee(employeeId),
    FOREIGN KEY (departmentId) REFERENCES Departments(departmentId)
);

-- Create indexes for foreign keys
CREATE INDEX idx_managers_employee ON Managers(employeeId);
CREATE INDEX idx_managers_department ON Managers(departmentId);
CREATE INDEX idx_managers_supervisor ON Managers(supervisorId);

-- Create a trigger to update the updatedAt timestamp
CREATE OR REPLACE FUNCTION update_managers_timestamp()
RETURNS TRIGGER AS $$
BEGIN
   NEW.updatedAt = CURRENT_TIMESTAMP;
   RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_managers_timestamp
BEFORE UPDATE ON Managers
FOR EACH ROW
EXECUTE FUNCTION update_managers_timestamp();


CREATE TABLE Departments
(
    departmentId SERIAL PRIMARY KEY,
    warehouseId INT,
    departmentName VARCHAR(255) NOT NULL,
    description VARCHAR(255) NOT NULL,
    managerId INT NOT NULL,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    isActive BOOLEAN DEFAULT 1,
    deptAddress VARCHAR(255) NOT NULL,

    FOREIGN KEY (managerId) REFERENCES Managers(managerId),
    FOREIGN KEY (warehouseId) REFERENCES Warehouse(warehouseId)
);

-- Create an index on departmentName for faster lookups
CREATE INDEX idx_department_name ON Departments(departmentName);

-- Create a trigger to update the updatedAt timestamp
CREATE OR REPLACE FUNCTION update_departments_timestamp()
RETURNS TRIGGER AS $$
BEGIN
   NEW.updatedAt = CURRENT_TIMESTAMP;
   RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_departments_timestamp
BEFORE UPDATE ON Departments
FOR EACH ROW
EXECUTE FUNCTION update_departments_timestamp()

CREATE TABLE Roles
(
    roleId SERIAL PRIMARY KEY,
    role VARCHAR(50) UNIQUE NOT NULL,
);

CREATE TABLE User_Roles
(
    userId INT NOT NULL,
    roleId INT NOT NULL,
    PRIMARY KEY (userId, role_id),
    FOREIGN KEY (userId) REFERENCES Users(id),
    FOREIGN KEY (roleId) REFERENCES Roles(id)
)

CREATE TABLE Role_Permissions
(
    roleId INT NOT NULL,
    permission VARCHAR(50) NOT NULL,
    PRIMARY KEY (roleId, permission),
    FOREIGN KEY (roleId) REFERENCES Roles(id)
);